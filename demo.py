#-*- coding:utf-8 -*-
from Libs.glo import *
init()                          # 全局变量初始化
from Libs.methods import *      # 导入方法
import sys

logger = get_value('logger')        # 日志

# 解析输入的值，ip，线程数目，扫描端口，扫描服务
def Parse(ips=None, filesPath=None, threadNum=3, port=None, service=False, brust=False):
    if not ips and not filesPath:
        print('请输入IP或域名或存放IP域名的文件路径')
        sys.exit()

    set_value('threadNum', threadNum)      # 线程数目存入全局变量

    # ping IP
    if ips:
        set_value('ips', ips)   # ips命令存入全局变量
        ipParse()               # 解析ips命令
        logger.info('-' * 30 + 'START PING IP' + '-' * 30)
        # pingThread()            # 启动多线程ping IP

        # logger.info('存活IP：{}'.format(get_value('pingList')))

    if filesPath:
        set_value('filesPath', filesPath)  # files地址存入全局变量
        filesParse()


    # 扫描开放端口
    if port:
        set_value('port', port)  # 端口命令存入全局变量
        portParse()            # 解析端口命令
        logger.info('-' * 30 + 'START SCAN PORT' + '-' * 30)
        scanPortThread()       # 启动多线程+协程扫描端口

        logger.info('开放端口：{}'.format(get_value('ipOpenPort')))           # {'123.125.115.109': ['80'], '123.125.115.110': ['80'], '123.125.115.111': ['80']}

    # 探测服务
    if service:
        logger.info('-' * 30 + 'START PROBE SERVICE' + '-' * 30)
        probeServiceThread()              # 探测服务

        logger.info('开放服务：{}'.format(get_value('serviceList')))

    # 在探测出服务的前提下，爆破可被爆破的端口或服务
    if brust:
        logger.info('-' * 30 + 'START PROBE BRUST' + '-' * 30)
        brustParse()




if __name__ == '__main__':
    # usage = ''
    # parse = OptionParser(usage=usage)
    # parse.add_option('-i', '--ips', dest='ips', type='string', help='input 192.168.1.1/24 or 192.168.1.1-192.168.10.1')
    #
    # options, args = parse.parse_args()
    # ips = options.ips

    # ips = '111.74.80.0/20'    # 123.125.115.111/25
    filesPath = r'C:\Users\Asus\Desktop\py\py3\project\PortExploit\files2.txt'
    port = '3306'   # 21,22,80,443,3306,1433,3389
    t = 300           # 线程数目
    s = True        # 服务
    b = True        # 爆破
    Parse(ips=None, filesPath=filesPath, threadNum=t, port=port, service=s, brust=b)        # 解析输入的命令


