#-*- coding:utf-8 -*-
import re
from Libs.glo import *
import threading
import socket
import gevent

event = getThrEvent()
logger = get_value('logger')
pyVersion = get_value('pyVersion')
ipOpenPort = get_value('ipOpenPort')
serviceRE = get_value('serviceRE')
probes = get_value('probes')

# 多线程+协程探测服务
class probeServiceMultiThr(threading.Thread):
    def __init__(self, q, num):
        threading.Thread.__init__(self)
        self.ipOpenPort = ipOpenPort
        self.q = q
        self.num = num

    # 多线程完成扫描多个IP
    def run(self):
        while event.is_set():
            if self.q.empty():
                break
            else:
                tgtIp = self.q.get()
                self.gev(tgtIp)

    # 探测服务
    def probeService(self, tgtIp, tgtPort):
        socket.setdefaulttimeout(1)
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.settimeout(1)
        address = (tgtIp, int(tgtPort))
        try:
            s.connect(address)
            result = s.recv(256)
            service = self.match(result)
            if service != ['UnKnow']:
                addIpPortService(tgtIp, tgtPort, service)
                logger.info('IP [{}] -> PORT [{}] -> SERVICE {}'.format(tgtIp, tgtPort, service))

        except Exception as e:
            for probe in probes:
                try:
                    s.sendall(bytes(probe.encode('utf-8')))
                except Exception as e:
                    continue
                try:
                    result = s.recv(256)
                    # logger.info(result.decode('utf-8'))
                    service = self.match(result)
                    if service != ['UnKnow']:
                        addIpPortService(tgtIp, tgtPort, service)
                        logger.info('IP [{}] -> PORT [{}] -> SERVICE {}'.format(tgtIp, tgtPort, service))

                except Exception as e:
                    continue

    # 协程扫描列表里的所有端口
    def gev(self, tgtIp):
        jobs = [gevent.spawn(self.probeService, tgtIp, tgtPort) for tgtPort in ipOpenPort[tgtIp]]
        gevent.joinall(jobs)

    # 正则匹配服务
    def match(self, result):
        service = []
        for each in serviceRE:
            ret = re.findall(bytes(each[1].encode('utf-8')), result)
            if ret:
                service.append(each[0])
        if service:
            return list(set(service))
        else:
            return ['UnKnow']

