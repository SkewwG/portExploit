#-*- coding:utf-8 -*-
import platform
from subprocess import Popen, PIPE
import re
from Libs.glo import *
import threading


event = get_value('threadEvent')
logger = get_value('logger')
pyVersion = get_value('pyVersion')

class pingMultiThr(threading.Thread):
    def __init__(self,q,num):
        threading.Thread.__init__(self)
        self.q = q
        self.num = num
        self.pingList = []                          # 存放能够ping通的IP列表
        self.reCompile = re.compile(r'TTL')         # compile编译，匹配能够ping通的IP


    def run(self):
        while event.is_set():
            if self.q.empty():
                break
            else:
                ip = self.q.get()
                self.pinger(ip)


    def pinger(self, ip):
        if platform.system() == 'Linux':
            pass
            # p = Popen(['ping', '-c 2', ip], stdout=PIPE)
            # m = re.search('(\d)\sreceived', p.stdout.read())
            # try:
            #     if m.group(1) != '0':
            #         self.pingList.append(ip)
            # except:
            #     pass

        if platform.system() == 'Windows':
            p = Popen('ping -n 1 ' + ip, stdout=PIPE)
            ping_bytes = p.stdout.read()     # 将字节流
            ping_ret = ping_bytes if pyVersion == 2 else ping_bytes.decode('GB2312')  # 如果python的版本是3，则需要将字节流解码成字符串
            m = self.reCompile.search(ping_ret)
            if m:
                logger.info('[OK] ping {}'.format(ip))
                addPingValue(ip)
                self.pingList.append(ip)
            else:
                # logger.info("[Fail] Can't ping {}".format(ip))
                pass